#!/usr/bin/env ruby

# hub(1)

class Hub
  VERSION = '0.1.0'
end


class Hub
  class Args < Array
    def after(command = nil, &block)
      @after ||= block ? block : command
    end

    def after?
      !!@after
    end
  end
end


class Hub
  module Commands
    instance_methods.each { |m| undef_method(m) unless m =~ /(^__|send|to\?$)/ }
    extend self

    PRIVATE = 'git@github.com:%s/%s.git'
    PUBLIC  = 'git://github.com/%s/%s.git'
    USER    = `git config --global github.user`.chomp
    REPO    = `basename $(pwd)`.chomp

    def clone(args)
      ssh = args.delete('-p')
      args.each_with_index do |arg, i|
        if arg.scan('/').size == 1 && !arg.include?(':')
          url = ssh ? PRIVATE : PUBLIC
          args[i] = url % arg.split('/')
        end
      end
      args
    end

    def remote(args)
      if args[1] == 'add'
        if args.delete('-g')
          ssh  = args.delete('-p')
          user = args.last
          url  = ssh ? PRIVATE : PUBLIC
          args << url % [ user, REPO ]
        end
      end
      args
    end

    def init(args)
      if args.delete('-g')
        url = PRIVATE % [ USER, REPO ]
        args.after "git remote add origin #{url}"
      end
      args
    end

    def version(args)
      args.after do
        puts "hub version %s" % VERSION
      end
    end
    alias_method "--version", :version
  end
end


class Hub
  attr_reader :args
  def initialize(*args)
    @args = Args.new(args)

    if @args.empty?
      @args[0] = 'help'
    elsif Commands.respond_to?(@args[0])
      Commands.send(@args[0], @args)
    end
  end

  def command
    "git #{args.join(' ')}"
  end

  def after
    args.after.to_s
  end

  def execute
    if args.after?
      execute_with_after_callback
    else
      exec "git", *args
    end
  end

  def execute_with_after_callback
    after = args.after
    if system("git", *args)
      after.respond_to?(:call) ? after.call : exec(after)
      exit
    else
      exit 1
    end
  end
end

if $0 == __FILE__
  Hub.new(*ARGV).execute
end
